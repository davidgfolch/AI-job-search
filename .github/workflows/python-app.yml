# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        cp '.env.example' .env
    - name: Install commonlib
      run: cd packages/commonlib && poetry lock && poetry install --no-interaction && cd ../..
  build:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        folder: [apps/scrapper, apps/viewer]        
    steps:
    - name: Install ${{ matrix.folder }}
      run: cd ${{ matrix.folder }} && poetry lock && poetry install --no-interaction && cd ../..
    - name: Install aiEnrich dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        cd apps/aiEnrich
        uv tool update-shell
        uv tool install crewai
        crewai install
        cd ../..
  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        folder: [packages/commonlib, apps/scrapper, apps/viewer]    
    steps:
    - name: ${{ matrix.folder }} tests
      run: cd ${{ matrix.folder }} && poetry run pytest && cd ../..
    - name: Run aiEnrich tests
      run: cd apps/aiEnrich && uv run pytest && cd ../..
    # - name: Set PYTHONPATH
    #   run: echo "PYTHONPATH=src" >> $GITHUB_ENV
    # - name: Clean up __pycache__ and .pyc files
    #   run: |
    #     find . -type d -name "__pycache__" -exec rm -r {} +
    #     find . -type f -name "*.pyc" -exec rm -f {} +
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  coverage:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        folder: [packages/commonlib, apps/scrapper, apps/viewer]
    steps:
    - name: ${{ matrix.folder }} coverage
      run: |
        cd ${{ matrix.folder }}
        poetry run coverage run -m pytest
        poetry run coverage report -m
        poetry run coverage xml
        mv coverage.xml ${{ matrix.folder }}-coverage.xml        
        cd ../..
    - name: aiEnrich coverage
      run: |
        cd apps/aiEnrich
        uv run coverage run -m pytest
        uv run coverage report -m
        uv run coverage xml
        mv coverage.xml commonlib-coverage.xml
        cd ../..
  coverage-badge:
    runs-on: ubuntu-latest
    needs: coverage
    strategy:
      matrix:
        folder: [packages/commonlib, apps/scrapper, apps/viewer, apps/aiEnrich]
    steps:
    - name: ${{ matrix.folder }} coverage badge
      uses: tj-actions/coverage-badge-py@v2
      with:
        coverage.filename: ./${{ matrix.folder }}-coverage.xml
        badge.filename: ./${{ matrix.folder }}-coverage.svg        
   

