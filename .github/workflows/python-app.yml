# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  
env:
  MODULES: "packages/commonlib apps/scrapper apps/viewer apps/aiEnrich"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install package manager
      run: |
        cp '.env.example' .env
        curl -LsSf https://astral.sh/uv/install.sh | sh
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install MODULES
      run: |
        read -ra MODULE_ARR <<< "${MODULES}"
        for MODULE in "${MODULE_ARR[@]}"; do
          cd "${MODULE}"
          if [ "${MODULE}" == "apps/aiEnrich" ]; then
            uv tool update-shell
            uv tool install crewai
            crewai install
          else
            poetry lock && poetry install --no-interaction
          fi
          cd ../..
        done
    - name: Tests MODULES
      run: |
        read -ra MODULE_ARR <<< "${MODULES}"
        for MODULE in "${MODULE_ARR[@]}"; do
          cd "${MODULE}"
          if [ "${MODULE}" == "apps/aiEnrich" ]; then
            uv run pytest
          else
            poetry run pytest
          fi
          cd ../..
        done
    - name: Coverage
      run: |
        read -ra MODULE_ARR <<< "${MODULES}"
        for MODULE in "${MODULE_ARR[@]}"; do
          cd "${MODULE}"
          if [ "${MODULE}" == "apps/aiEnrich" ]; then
            uv run coverage run -m pytest
            uv run coverage report -m
            uv run coverage xml
            uv run coverage-badge -o coverage-badge.svg -f
          else
            poetry run coverage run -m pytest
            poetry run coverage report -m
            poetry run coverage xml
            poetry run coverage-badge -o coverage-badge.svg -f
          fi
          cd ../..
        done

    - name: Commit coverage badge
      run: |
        # git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        read -ra MODULE_ARR <<< "${MODULES}"
        changes=false
        for MODULE in "${MODULE_ARR[@]}"; do
          if git diff --quiet "${MODULE}/coverage-badge.svg"; then  # No changes in this file
            continue
          else
            changes=true
            git add ${MODULE}/coverage-badge.svg
          fi
        done
        if $changes; then
          echo "No coverage badge files changed"
        else
          git commit -m "Update coverage badges"
          git push
        fi        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




        # - name: Set PYTHONPATH
    #   run: echo "PYTHONPATH=src" >> $GITHUB_ENV
    # - name: Clean up __pycache__ and .pyc files
    #   run: |
    #     find . -type d -name "__pycache__" -exec rm -r {} +
    #     find . -type f -name "*.pyc" -exec rm -f {} +
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
